% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pspm_R6.R
\name{PSPMLearn}
\alias{PSPMLearn}
\title{Probabilistic Spatial Partition Model Fitter}
\value{
Returns a PSPMLearn object.
}
\description{
Class to fit the parameters of a Probabilistic Spatial Partition Model across
a set of PSPM objects.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{pspm_ls}}{List of PSPM objects. Input by user.}

\item{\code{M}}{Number of objects in \code{pspm_ls}. Set internally.}

\item{\code{sigma2}}{Penalization parameter. Input by user.}

\item{\code{samples_cache}}{Cache of samples saved during parametric bootstrapping.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PSPMLearn-new}{\code{PSPMLearn$new()}}
\item \href{#method-PSPMLearn-reset}{\code{PSPMLearn$reset()}}
\item \href{#method-PSPMLearn-reset_beta}{\code{PSPMLearn$reset_beta()}}
\item \href{#method-PSPMLearn-composite_log_likelihood}{\code{PSPMLearn$composite_log_likelihood()}}
\item \href{#method-PSPMLearn-fit_composite_log_likelihood}{\code{PSPMLearn$fit_composite_log_likelihood()}}
\item \href{#method-PSPMLearn-bootstrap_composite_log_likelihood}{\code{PSPMLearn$bootstrap_composite_log_likelihood()}}
\item \href{#method-PSPMLearn-par_bootstrap_composite_log_likelihood}{\code{PSPMLearn$par_bootstrap_composite_log_likelihood()}}
\item \href{#method-PSPMLearn-clone}{\code{PSPMLearn$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSPMLearn-new"></a>}}
\if{latex}{\out{\hypertarget{method-PSPMLearn-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new PSPMLearn object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSPMLearn$new(pspm_ls, sigma2 = 10)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pspm_ls}}{List of PSPM objects}

\item{\code{sigma2}}{Penalty parameter for penalized maximum composite likelihood estimation}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A PSPMLearn object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSPMLearn-reset"></a>}}
\if{latex}{\out{\hypertarget{method-PSPMLearn-reset}{}}}
\subsection{Method \code{reset()}}{
Reset PSPMLearn object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSPMLearn$reset()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSPMLearn-reset_beta"></a>}}
\if{latex}{\out{\hypertarget{method-PSPMLearn-reset_beta}{}}}
\subsection{Method \code{reset_beta()}}{
Reset beta parameters to 0
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSPMLearn$reset_beta(beta = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{beta}}{Can be NULL -- then chooses (default) betas set in 
first PSPM object -- 
or a vector of beta parameters (constant and one for each edge-predictor)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSPMLearn-composite_log_likelihood"></a>}}
\if{latex}{\out{\hypertarget{method-PSPMLearn-composite_log_likelihood}{}}}
\subsection{Method \code{composite_log_likelihood()}}{
Get composite log likelihood 

Returns sum of composite log likelihoods over
all PSPM objects in the PSPMLearn object for a set of beta parameters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSPMLearn$composite_log_likelihood(beta)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{beta}}{Set of Beta parameters to compute composite log likelihood for.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Numeric composite log likelihood penalized by \code{sum(beta^2)/(2*sigma2)}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSPMLearn-fit_composite_log_likelihood"></a>}}
\if{latex}{\out{\hypertarget{method-PSPMLearn-fit_composite_log_likelihood}{}}}
\subsection{Method \code{fit_composite_log_likelihood()}}{
Fit beta parameters to minimize composite log likelihood

Returns set of beta parameters the minimizes (penalized) composite log likelihood
across PSPM objects in PSPMLearn object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSPMLearn$fit_composite_log_likelihood(
  beta_init = NULL,
  set_cache = TRUE,
  clear_cache = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{beta_init}}{Set of Beta parameters to initialize fitting with}

\item{\code{set_cache}}{(Re)set cache to speed up fitting}

\item{\code{clear_cache}}{Clear cache after fitting (reduces memory demands).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Numeric composite log likelihood penalized by \code{sum(beta^2)/(2*sigma2)}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSPMLearn-bootstrap_composite_log_likelihood"></a>}}
\if{latex}{\out{\hypertarget{method-PSPMLearn-bootstrap_composite_log_likelihood}{}}}
\subsection{Method \code{bootstrap_composite_log_likelihood()}}{
Parametric bootstrap

Returns confidence intervals and full set of 
bootstrapped estimates from parametric bootstrap.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSPMLearn$bootstrap_composite_log_likelihood(
  n_boot_iter = 100,
  burnin = 10,
  ci_level = 0.95,
  return_sims = FALSE,
  report_every = 50,
  cache_samples = T
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n_boot_iter}}{Number of bootstrap iterations.}

\item{\code{burnin}}{Number of burn-in period for each sampling.}

\item{\code{ci_level}}{Confidence interval level.}

\item{\code{return_sims}}{Return all sampled partitionings?}

\item{\code{report_every}}{Periodicity of reporting after bootstrap iterations.}

\item{\code{cache_samples}}{Cache the sampled partitionings in the PSPM objects inside the PSPMLearn object.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list with estimated parameters, confidence intervals, and 
possibly sampled partitionings.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSPMLearn-par_bootstrap_composite_log_likelihood"></a>}}
\if{latex}{\out{\hypertarget{method-PSPMLearn-par_bootstrap_composite_log_likelihood}{}}}
\subsection{Method \code{par_bootstrap_composite_log_likelihood()}}{
Parallelized parametric bootstrap

Returns confidence intervals and full set of 
bootstrapped estimates from parametric bootstrap.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSPMLearn$par_bootstrap_composite_log_likelihood(
  cl = NULL,
  n_boot_iter = 100,
  burnin = 100,
  ci_level = 0.95,
  return_sims = FALSE,
  cache_samples = T
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{cl}}{CPU cluster object (created through \code{parallel::makeCluster}) 
or integer number of core. If the latter, a cluster is setup internally and
closed upon completion.                           #'}

\item{\code{n_boot_iter}}{Number of bootstrap iterations.}

\item{\code{burnin}}{Number of burn-in period for each sampling.}

\item{\code{ci_level}}{Confidence interval level.}

\item{\code{return_sims}}{Return all sampled partitionings?}

\item{\code{cache_samples}}{Cache the sampled partitionings in the PSPM objects inside the PSPMLearn object.}

\item{\code{report_every}}{Periodicity of reporting after bootstrap iterations.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list with estimated parameters, confidence intervals, and 
possibly sampled partitionings.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSPMLearn-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PSPMLearn-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSPMLearn$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
